// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Faculty {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  password String
  name     String
  Document Document[]
  Class    Class[]
}

model Student {
  id             Int           @id @default(autoincrement())
  registerNumber String        @unique
  password       String
  isIncharge     Boolean       @default(false)
  Absentee       Absentee[]
  ClassMember    ClassMember[]
}

model Class {
  id             Int              @id @default(autoincrement())
  name           String
  incharge       Faculty          @relation(fields: [inchargeId], references: [id])
  inchargeId     Int
  Absentee       Absentee[]
  DocumentAccess DocumentAccess[]
  ClassMember    ClassMember[]
}

model ClassMember {
  id             Int     @id @default(autoincrement())
  class          Class   @relation(fields: [classId], references: [id])
  classId        Int
  student        Student @relation(fields: [registerNumber], references: [registerNumber])
  registerNumber String

  @@unique([classId, registerNumber])
}

model Absentee {
  id        Int      @id @default(autoincrement())
  date      DateTime
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int
}

model Document {
  id             Int              @id @default(autoincrement())
  source         String
  name           String
  description    String?
  author         Faculty          @relation(fields: [authorId], references: [id])
  authorId       Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DocumentAccess DocumentAccess[]
}

model DocumentAccess {
  id         Int      @id @default(autoincrement())
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int
  class      Class    @relation(fields: [classId], references: [id])
  classId    Int
}
