// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Faculty {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String
  Post     Post[]
  Class    Class[]
}

model Student {
  id             Int           @id @default(autoincrement())
  registerNumber String        @unique
  password       String
  isIncharge     Boolean       @default(false)
  Attendance     Attendance[]
  ClassMember    ClassMember[]
  Mark           Mark[]
}

model Class {
  id             Int              @id @default(autoincrement())
  name           String
  incharge       Faculty          @relation(fields: [inchargeId], references: [id], onDelete: Cascade)
  inchargeId     Int
  PostAccess     PostAccess[]
  ClassMember    ClassMember[]
  AttendanceMode AttendanceMode[]
  Mark           Mark[]
}

model ClassMember {
  id             Int     @id @default(autoincrement())
  class          Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId        Int
  student        Student @relation(fields: [registerNumber], references: [registerNumber], onDelete: Cascade)
  registerNumber String

  @@unique([classId, registerNumber])
}

model AttendanceMode {
  id         Int          @id @default(autoincrement())
  class      Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId    Int
  date       DateTime
  isPresent  Boolean
  Attendance Attendance[]
}

model Attendance {
  id               Int            @id @default(autoincrement())
  student          Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId        Int
  attendanceMode   AttendanceMode @relation(fields: [attendanceModeId], references: [id], onDelete: Cascade)
  attendanceModeId Int

  @@unique([studentId, attendanceModeId])
}

model Post {
  id             Int          @id @default(autoincrement())
  documentSource String?
  title          String
  description    String?
  author         Faculty      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  PostAccess     PostAccess[]
}

model PostAccess {
  id      Int   @id @default(autoincrement())
  Post    Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId Int
}

model Mark {
  id             Int     @id @default(autoincrement())
  Class          Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId        Int
  Student        Student @relation(fields: [registerNumber], references: [registerNumber], onDelete: Cascade)
  registerNumber String
  exam           Exam
  mark           Float

  @@unique([classId, registerNumber, exam])
}

enum Exam {
  IA1
  IA2
}
